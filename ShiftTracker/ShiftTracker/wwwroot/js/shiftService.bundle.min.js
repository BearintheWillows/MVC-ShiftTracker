var JS;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/typescript/components/breakForm.ts":
/*!************************************************!*\
  !*** ./src/typescript/components/breakForm.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "breakForm": () => (/* binding */ breakForm)
/* harmony export */ });
class breakForm {
    breaks = [];
    constructor() {
    }
    displayRow() {
        const form = document.getElementById("breakForm");
        form.innerHTML = "";
        if (this.breaks.length < 1) {
            form.append(this.createRow(undefined, undefined, "add"));
        }
        else {
        }
    }
    displayAllRows() {
        const form = document.getElementById("breakForm");
        form.innerHTML = "";
        if (this.breaks.length < 1) {
            form.append(this.createRow(undefined, undefined, "add"));
        }
        else {
            for (let i = 0; i < this.breaks.length; i++) {
                if (i === this.breaks.length - 1 && this.breaks.length > 1) {
                    form.append(this.createRow(this.breaks[i].startTime, this.breaks[i].endTime, "addAndRemove"));
                }
                else {
                    form.append(this.createRow(this.breaks[i].startTime, this.breaks[i].endTime, "remove"));
                }
            }
        }
    }
    createTimeInput(startOrEnd, time) {
        const input = document.createElement("input");
        const label = document.createElement("label");
        const timeInputDiv = document.createElement("div");
        label.textContent = startOrEnd ? "Start Time: " : "End Time: ";
        label.setAttribute("for", startOrEnd ? "startTime" : "endTime");
        input.type = "Time";
        if (startOrEnd === "startTime") {
            input.id = "startTime";
        }
        else if (startOrEnd === "endTime") {
            input.id = "endTime";
        }
        input.id = (this.breaks.length - 1).toString();
        timeInputDiv.append(label, input);
        return timeInputDiv;
    }
    createRemoveBreakButton() {
        const button = document.createElement("button");
        button.textContent = "Remove";
        button.addEventListener("click", (event) => {
            event.preventDefault();
            let element = event.target;
            let id = element.parentElement.id;
            this.breaks.splice(parseInt(id), 1);
            console.log(this.breaks);
        });
        return button;
    }
    createAddBreakButton() {
        const button = document.createElement("button");
        button.textContent = "Add";
        button.addEventListener("click", (event) => {
            event.preventDefault();
            this.addBreak(new Date(), new Date());
            this.displayAllRows();
        });
        return button;
    }
    createRow(startTime, endTime, buttonType) {
        const row = document.createElement("div");
        if (buttonType === "addAndRemove") {
            row.append(this.createTimeInput("startTime", startTime ? startTime : undefined), this.createTimeInput("endTime", endTime ? endTime : undefined), this.createRemoveBreakButton());
        }
        else if (buttonType === "remove") {
            row.append(this.createTimeInput("startTime", startTime ? startTime : undefined), this.createTimeInput("endTime", endTime ? endTime : undefined), this.createRemoveBreakButton(), this.createAddBreakButton());
        }
        else if (buttonType === "add") {
            row.append(this.createTimeInput("startTime", startTime ? startTime : undefined), this.createTimeInput("endTime", endTime ? endTime : undefined), this.createAddBreakButton());
        }
        row.classList.add("breakForm__row");
        return row;
    }
    addBreak(startTime, endTime) {
        const newBreak = {
            startTime: startTime,
            endTime: endTime,
            duration: this.calculateDuration(startTime, endTime)
        };
        console.log(newBreak);
        console.log(this.breaks);
        this.breaks.push(newBreak);
    }
    calculateDuration(startTime, endTime) {
        const duration = new Date(endTime.getTime() - startTime.getTime());
        return duration;
    }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*************************************************!*\
  !*** ./src/typescript/services/shiftService.ts ***!
  \*************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_breakForm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/breakForm */ "./src/typescript/components/breakForm.ts");

let form = new _components_breakForm__WEBPACK_IMPORTED_MODULE_0__.breakForm();
document.addEventListener("DOMContentLoaded", () => {
    form.displayAllRows();
});

})();

JS = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,